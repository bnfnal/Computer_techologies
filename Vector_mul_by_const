#include <iostream>
#include <omp.h>
using namespace std;

// умножение вектора на константу

int main() {
    int n = 60;
    int a = 10;
    int *b = new int[n];
    int *c = new int[n];
    for(int i=0; i<n; i++){
        b[i] = 1;
        c[i] = 0;
    }

    cout << "a: " << a << " " << endl;

    cout << "b: ";
    for(int i=0; i<n; i++){
        cout << b[i] << " ";
    }
    cout << endl;


#pragma omp parallel
    {
        int threads_count = omp_get_num_threads();
        int thread_num = omp_get_thread_num();
        int block_size = n / threads_count;
        int shift = block_size * thread_num;
        for(int i = 0; i < block_size; i++) {
            c[shift + i] = a * b[shift + i];
        }

        if (thread_num == 0){
            int j = block_size * threads_count;
            while(j < n){
                c[j] = a * b[j];
                j++;
            }
        }

    }

    cout << "c: ";
    for(int i=0; i<n; i++){
        cout << c[i] << " ";
    }
    cout << endl;

    return 0;
}
